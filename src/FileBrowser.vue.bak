<template>
    <v-card class="mx-auto" :loading="loading > 0">
        <!-- <toolbar
            :path="path"
            :storages="storagesArray"
            :storage="activeStorage"
            :endpoints="endpoints"
            :axios="axiosInstance"
            v-on:storage-changed="storageChanged"
            v-on:path-changed="pathChanged"
            v-on:add-files="addUploadingFiles"
            v-on:folder-created="refreshPending = true"
        ></toolbar> -->

        <v-row no-gutters>
            <v-col v-if="tree && $vuetify.display.smAndUp" sm="auto">
                <tree
                    :path="path"
                    :storage="activeStorage"
                    :icons="icons"
                    :endpoints="endpoints"
                    :axios="axiosInstance"
                    :refreshPending="refreshPending"
                    v-on:path-changed="pathChanged"
                    v-on:loading="loadingChanged"
                    v-on:refreshed="refreshPending = false"
                ></tree>
            </v-col>
            <v-divider v-if="tree" vertical></v-divider>
            <v-col>
                <list
                    :path="path"
                    :storage="activeStorage"
                    :icons="icons"
                    :endpoints="endpoints"
                    :axios="axiosInstance"
                    :refreshPending="refreshPending"
                    v-on:path-changed="pathChanged"
                    v-on:loading="loadingChanged"
                    v-on:refreshed="refreshPending = false"
                    v-on:file-deleted="refreshPending = true"
                ></list>
            </v-col>
        </v-row>
        <upload
            v-if="uploadingFiles !== false"
            :path="path"
            :storage="activeStorage"
            :files="uploadingFiles"
            :icons="icons"
            :axios="axiosInstance"
            :endpoint="endpoints.upload"
            :maxUploadFilesCount="maxUploadFilesCount"
            :maxUploadFileSize="maxUploadFileSize"
            v-on:add-files="addUploadingFiles"
            v-on:remove-file="removeUploadingFile"
            v-on:clear-files="uploadingFiles = []"
            v-on:cancel="uploadingFiles = false"
            v-on:uploaded="uploaded"
        ></upload>
    </v-card>
</template>
<script>
// default values
const availableStorages = [
    {
        name: "Local",
        code: "local",
        icon: "mdi-folder-multiple-outline"
    },
    {
        name: "Amazon S3",
        code: "s3",
        icon: "mdi-amazon-drive"
    }
    /*{
        name: "Dropbox",
        code: "dropbox",
        icon: "mdi-dropbox"
    }*/
];

const endpoints = {
    list: { url: "/storage/{storage}/list?path={path}", method: "get" },
    upload: { url: "/storage/{storage}/upload?path={path}", method: "post" },
    mkdir: { url: "/storage/{storage}/mkdir?path={path}", method: "post" },
    delete: { url: "/storage/{storage}/delete?path={path}", method: "post" }
};

const fileIcons = {
    zip: "mdi-folder-zip-outline",
    rar: "mdi-folder-zip-outline",
    htm: "mdi-language-html5",
    html: "mdi-language-html5",
    js: "mdi-nodejs",
    json: "mdi-json",
    md: "mdi-markdown",
    pdf: "mdi-file-pdf",
    png: "mdi-file-image",
    jpg: "mdi-file-image",
    jpeg: "mdi-file-image",
    mp4: "mdi-filmstrip",
    mkv: "mdi-filmstrip",
    avi: "mdi-filmstrip",
    wmv: "mdi-filmstrip",
    mov: "mdi-filmstrip",
    txt: "mdi-file-document-outline",
    xls: "mdi-file-excel",
    other: "mdi-file-outline"
};

export default defineComponent({
  name: 'FileBrowser'
})

// //props
// export default {
//     props: {
//         // comma-separated list of active storage codes
//         storages: {
//             type: String,
//             default: () => availableStorages.map(item => item.code).join(",")
//         },
//         // code of default storage
//         storage: { type: String, default: "local" },
//         // show tree view
//         tree: { type: Boolean, default: true },
//         // file icons set
//         icons: { type: Object, default: fileIcons },
//         // custom backend endpoints
//         endpoints: { type: Object, default: endpoints },
//         // custom axios instance
//         axios: { type: Function },
//         // custom configuration for internal axios instance
//         axiosConfig: { type: Object, default: {} },
//         // max files count to upload at once. Unlimited by default
//         maxUploadFilesCount: { type: Number, default: 0 },
//         // max file size to upload. Unlimited by default
//         maxUploadFileSize: { type: Number, default: 0 }
//     }
// }
</script>

<script setup>
import axios from "axios";
import { ref, reactive, onBeforeMount, onMounted, computed, defineComponent } from "vue";

import Toolbar from "./Toolbar.vue";
import Tree from "./Tree.vue";
import List from "./List.vue";
import Upload from "./Upload.vue";



// // life cycle
// onBeforeMount(() => {
//     console.log("this.$vuetify.breakpoint.smAndUp")
//     // activeStorage.value = storage;
//     // axiosInstance.value = axios.create(axiosConfig.value);
// });
// onMounted(() =>{
//     console.log("onMounted")
//     // activeStorage.value = storage;
//     // axiosInstance.value = axios.create(axiosConfig.value);
//     // // console.log("this.$vuetify.breakpoint.smAndUp", this.$vuetify)
//     // if (!path.value && !(tree.value && $vuetify.breakpoint.smAndUp)) {
//     //     pathChanged("/");
//     // }
// });



// props
const props = defineProps({
    // comma-separated list of active storage codes
    storages: {
        type: String,
        default: () => availableStorages.map(item => item.code).join(",")
    },
    // code of default storage
    storage: { type: String, default: "local" },
    // show tree view
    tree: { type: Boolean, default: true },
    // file icons set
    icons: { type: Object, default: () => fileIcons },
    // custom backend endpoints
    endpoints: { type: Object, default: () => endpoints },
    // custom axios instance
    axios: { type: Function },
    // custom configuration for internal axios instance
    axiosConfig: { type: Object, default: () => {} },
    // max files count to upload at once. Unlimited by default
    maxUploadFilesCount: { type: Number, default: 0 },
    // max file size to upload. Unlimited by default
    maxUploadFileSize: { type: Number, default: 0 }
})

// data properties
const loading = ref(0)
const path = ref("")
const activeStorage = ref(null)
const uploadingFiles = ref(false) // or an Array of files
const refreshPending = ref(false)
const axiosInstance = ref(null)

// compute properties
const storagesArray = computed(() => {
    let storageCodes = props.storages.split(","),
        result = [];
    storageCodes.forEach(code => {
        result.push(availableStorages.find(item => item.code == code));
    });
    return result;
})

// methods
function loadingChanged(pLoading) {
    if (pLoading) {
        loading.value++;
    } else if (loading.value > 0) {
        loading.value--;
    }
}
function storageChanged(storage) {
    activeStorage.value = storage;
}
function addUploadingFiles(files) {
    files = Array.from(files);

    if (maxUploadFileSize.value) {
        files = files.filter(
            file => file.size <= maxUploadFileSize
        );
    }

    if (uploadingFiles.value === false) {
        uploadingFiles.value = [];
    }
    
    if (maxUploadFilesCount.value && uploadingFiles.value.length + files.value.length > maxUploadFilesCount.value) {
        files.value = files.value.slice(0, maxUploadFilesCount.value - uploadingFiles.value.length);
    }

    uploadingFiles.value.push(...files.value);
}
function removeUploadingFile(index) {
    uploadingFiles.value.splice(index, 1);
}
function uploaded() {
    uploadingFiles.value = false;
    refreshPending.value = true;
}
function pathChanged(pPath) {
    path.value = pPath;
    $emit("change", pPath);
}


// props: {
//         // comma-separated list of active storage codes
//         storages: {
//             type: String,
//             default: () => availableStorages.map(item => item.code).join(",")
//         },
//         // code of default storage
//         storage: { type: String, default: "local" },
//         // show tree view
//         tree: { type: Boolean, default: true },
//         // file icons set
//         icons: { type: Object, default: () => fileIcons },
//         // custom backend endpoints
//         endpoints: { type: Object, default: () => endpoints },
//         // custom axios instance
//         axios: { type: Function },
//         // custom configuration for internal axios instance
//         axiosConfig: { type: Object, default: () => {} },
//         // max files count to upload at once. Unlimited by default
//         maxUploadFilesCount: { type: Number, default: 0 },
//         // max file size to upload. Unlimited by default
//         maxUploadFileSize: { type: Number, default: 0 }
//     },


// old codes
// export default {
//     components: {
//         Toolbar,
//         Tree,
//         List,
//         Upload
//     },
//     model: {
//         prop: "path",
//         event: "change"
//     },
//     props: {
//         // comma-separated list of active storage codes
//         storages: {
//             type: String,
//             default: () => availableStorages.map(item => item.code).join(",")
//         },
//         // code of default storage
//         storage: { type: String, default: "local" },
//         // show tree view
//         tree: { type: Boolean, default: true },
//         // file icons set
//         icons: { type: Object, default: () => fileIcons },
//         // custom backend endpoints
//         endpoints: { type: Object, default: () => endpoints },
//         // custom axios instance
//         axios: { type: Function },
//         // custom configuration for internal axios instance
//         axiosConfig: { type: Object, default: () => {} },
//         // max files count to upload at once. Unlimited by default
//         maxUploadFilesCount: { type: Number, default: 0 },
//         // max file size to upload. Unlimited by default
//         maxUploadFileSize: { type: Number, default: 0 }
//     },
//     data() {
//         return {
//             loading: 0,
//             path: "",
//             activeStorage: null,
//             uploadingFiles: false, // or an Array of files
//             refreshPending: false,
//             axiosInstance: null
//         };
//     },
//     computed: {
//         storagesArray() {
//             let storageCodes = this.storages.split(","),
//                 result = [];
//             storageCodes.forEach(code => {
//                 result.push(availableStorages.find(item => item.code == code));
//             });
//             return result;
//         }
//     },
//     methods: {
        
//     },
//     onBeforeMount() {
//         console.log("this.$vuetify.breakpoint.smAndUp", this.$vuetify)
//         this.activeStorage = this.storage;
//         this.axiosInstance = this.axios || axios.create(this.axiosConfig);
//     },
//     onMounted() {
//         // console.log("this.$vuetify.breakpoint.smAndUp", this.$vuetify)
//         if (!this.path && !(this.tree && this.$vuetify.breakpoint.smAndUp)) {
//             this.pathChanged("/");
//         }
//     }
// };
</script>

<style lang="scss" scoped>
</style>